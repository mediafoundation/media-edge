- name: Prepare the system for Media-Edge
  ansible.builtin.file:
    state: absent
    path: ~/media-edge/
  when: "'edge' in group_names"

- name: Ensure all necessary directories exist before copying files
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: root
    group: root
    mode: 0775
  loop:
    - ~/media-edge/
    - ~/media-edge/caddy
    - ~/media-edge/public/blocked
  when: "'edge' in group_names"

- name: Cleaning up cron if necessary
  shell: crontab -r
  ignore_errors: true

- name: Fixing apt package issues
  shell: |
    sed -i '/Acquire::AllowReleaseInfoChange::Suite/d' /etc/apt/apt.conf.d/90releaseinfo-change
    echo 'Acquire::AllowReleaseInfoChange::Suite "true";' >> /etc/apt/apt.conf.d/90releaseinfo-change

- name: Updating apt package
  shell: apt-get update -y --allow-releaseinfo-change

- name: Reconfigure dpkg
  command: dpkg --configure -a

- name: Upgrading system packages
  ansible.builtin.apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 3600

- name: Removing potential conflicting packages
  apt:
    state: absent 
    autoremove: true
    name:
    - apache2
    - nginx    
    - exim4
    - exim4-base   
    - exim4-config
    - exim4-daemon-light       
    - rpcbind  
    - nfs-server
    - libunbound8

- name: Installing shared system packages
  apt:
    update_cache: true
    install_recommends: true
    state: latest
    name:
      - git
      - htop
      - vim
      - curl
      - bmon
      - gcc
      - nfs-common
      - build-essential
      - iftop
      - net-tools
      - python3-pycurl
      - python3-apt
      - python3-psycopg2
      - dnsutils
      - debian-keyring
      - debian-archive-keyring
      - apt-transport-https
      - gnupg2
      - libedit-dev
      - libjemalloc-dev
      - libncurses-dev
      - libtool
      - pkg-config
      - ethtool
      - rsync
      - tmux
      - jq
      - wget

- name: Installing Edge system packages
  apt:
    update_cache: true
    install_recommends: true
    state: latest
    name:
      - fzf
      - python3-docutils
      - python3-sphinx
  when: "'edge' in group_names"

- name: Installing Origin system packages
  apt:
    update_cache: true
    install_recommends: true
    state: latest
    name:
      - libunbound-dev
      - gpg
      - software-properties-common
      - dirmngr
      - lsb-release
      - locate
      - unzip
      - autotools-dev
      - libpcre2-dev
      - cpio
      - graphviz
      - autoconf-archive
      - libpcre3
  when: "'origin' in group_names"

- name: Copying blocked resource template 
  ansible.builtin.copy:
   src: files/edge/system/index.html
   dest: ~/media-edge/public/blocked
  when: "'edge' in group_names"

- name: Download and apply NodeJS sources
  shell: curl -sL https://deb.nodesource.com/{{node_version}} | bash -
  when: "'origin' in group_names"

- name: Install NodeJS from apt
  apt: pkg=nodejs state=latest update_cache=yes install_recommends=yes
  when: "'origin' in group_names"

- name: Install PM2
  shell: npm install -g pm2
  when: "'origin' in group_names"

- name: Install yarn
  shell: npm -g install yarn
  when: "'origin' in group_names"

- name: Adds hostname to /etc/hostname based on IP
  shell: |
    echo "{{ 'media-origin-' if 'origin' in group_names else 'media-edge-' }}$(wget -q whatismyip.akamai.com -O -)" > /etc/hostname.tmp
    sed 's/\./-/g' /etc/hostname.tmp > /etc/hostname
    hostname -F /etc/hostname

- name: Preventing services to start after installed
  shell: "{{ item }}"
  loop:
    - echo '#!/bin/sh' > /usr/sbin/policy-rc.d
    - echo 'exit 101' >> /usr/sbin/policy-rc.d

- name: Prevent services from starting automatically
  shell: chmod +x /usr/sbin/policy-rc.d