# Start by resetting APT sources to avoid issues with third-party repositories
- name: Find all files in sources.list.d
  find:
    paths: "/etc/apt/sources.list.d/"
    file_type: file
  register: found_files

- name: Remove all files from sources.list.d
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ found_files.files }}"
  when: found_files.matched > 0

- name: Reset main sources.list to default based on current Debian release
  copy:
    dest: /etc/apt/sources.list
    content: |
      deb https://deb.debian.org/debian/ {{ ansible_distribution_release }} main
      deb-src https://deb.debian.org/debian/ {{ ansible_distribution_release }} main
      deb https://security.debian.org/debian-security {{ ansible_distribution_release }}-security main contrib
      deb-src https://security.debian.org/debian-security {{ ansible_distribution_release }}-security main contrib
      deb https://deb.debian.org/debian/ {{ ansible_distribution_release }}-updates main contrib
      deb-src https://deb.debian.org/debian/ {{ ansible_distribution_release }}-updates main contrib


# Adjust APT configurations to allow release info changes
- name: Fixing apt package issues
  shell: |
    sed -i '/Acquire::AllowReleaseInfoChange::Suite/d' /etc/apt/apt.conf.d/90releaseinfo-change
    echo 'Acquire::AllowReleaseInfoChange::Suite "true";' >> /etc/apt/apt.conf.d/90releaseinfo-change

# Update the APT cache
- name: Update apt cache directly
  apt:
    update_cache: yes
  register: apt_update_result
  ignore_errors: yes

# Display any errors encountered during the APT cache update
- name: Print apt update output if failed
  debug:
    var: apt_update_result.stdout_lines
  when: apt_update_result is failed

# Upgrade all system packages if APT cache update was successful
- name: Upgrade system packages
  apt:
    upgrade: "yes"
  when: apt_update_result is succeeded

# Address any unconfigured packages
- name: Reconfigure dpkg
  command: dpkg --configure -a

# Prevent services from auto-starting after installation
- name: Preventing services to start after installed
  shell: |
    echo '#!/bin/sh' > /usr/sbin/policy-rc.d
    echo 'exit 101' >> /usr/sbin/policy-rc.d
    chmod +x /usr/sbin/policy-rc.d

# Remove packages that might conflict with our setup
- name: Removing potential conflicting packages
  apt:
    state: absent 
    autoremove: true
    name:
      - apache2
      - nginx

# Install shared system packages, ensuring APT cache update was successful
- name: Installing shared system packages
  apt:
    install_recommends: true
    state: latest
    name:
      - htop
      - gpg
      - rsync
      - tmux
      - jq
      - wget
      - vim
      - curl
      - bmon
      - iftop
  when: apt_update_result is succeeded

# Set the hostname based on the IP and group membership
- name: Adds hostname to /etc/hostname based on IP
  shell: |
    echo "{{ 'media-origin-' if inventory_hostname in groups["origin"] else 'media-edge-' }}{{ ansible_ssh_host }}" > /etc/hostname.tmp
    sed 's/\./-/g' /etc/hostname.tmp > /etc/hostname
    hostname -F /etc/hostname

# Disable Firewall to allow connectivity between edge and origin
- name: Disable UFW if enabled
  ufw:
    state: disabled
  ignore_errors: yes
