- name: Install docker on Debian based systems
  block:
    - name: Remove possible conflicting packages
      apt:
        name:
          - docker.io
          - docker-doc
          - docker-compose
          - podman-docker
          - containerd
          - runc
        state: absent
        autoremove: yes

    - name: Install required packages
      apt:
        name:
          - ca-certificates
          - curl
        state: present
        update_cache: yes

    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.asc

    - name: Add Docker's official APT repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo $VERSION_CODENAME) stable" |  tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install Docker CLI
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes
  when: ansible_facts['os_family'] == "Debian"

- name: Install Docker on RedHat-based systems
  block:
    - name: Remove possible conflicting packages
      yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent

    - name: Install required packages
      yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present

    - name: Add Docker repository
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker packages
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Enable and start Docker
      service:
        name: docker
        state: started
        enabled: yes
  when: ansible_facts['os_family'] == "RedHat"

- name: Install Docker on Windows based systems
  block:
    - name: Enable the containers feature
      win_feature:
        name: Containers
        state: present
        include_sub_features: yes
        restart: yes

    - name: Enable the Hyper-V feature
      win_feature:
        name: Hyper-V
        state: present
        include_sub_features: yes
        restart: yes

    - name: Download DockerMsftProvider module
      win_shell: |
        Install-Module -Name DockerMsftProvider -Repository PSGallery -Force
      args:
        creates: "C:\\Program Files\\WindowsPowerShell\\Modules\\DockerMsftProvider"

    - name: Install Docker using DockerMsftProvider
      win_package:
        name: Docker
        provider: DockerMsftProvider
        state: present

    - name: Ensure Docker service is running
      win_service:
        name: docker
        start_mode: auto
        state: started
  when: ansible_facts['os_family'] == "Windows"

- name: Stop and remove all origin containers
  shell: |
    docker ps -q | xargs -r docker stop
    docker ps -aq | xargs -r docker rm
  changed_when: false

- name: Reset containers folder
  file:
    path: /root/containers
    state: absent

- name: Create containers folder
  file:
    path: /root/containers
    state: directory
    mode: '0755'

- name: Copy Docker Compose files
  copy:
    src: "{{ item }}"
    dest: /root/containers/docker-compose.yml
  loop: >
    {{ ['files/origin/docker/docker-compose.yml'] if inventory_hostname in groups['origin'] else 
       ['files/edge/docker/docker-compose.yml'] if inventory_hostname in groups['edge'] else [] }}


- name: Create Docker .env files
  template:
    src: "{{ item }}"
    dest: /root/containers/.env
  loop: >
    {{ ['files/origin/docker/.env.j2'] if inventory_hostname in groups['origin'] else
       ['files/edge/docker/.env.j2'] if inventory_hostname in groups['edge'] else [] }}
