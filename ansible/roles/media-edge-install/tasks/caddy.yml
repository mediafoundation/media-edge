- name: Check if caddy is installed and it has the correct modules and version
  shell: caddy list-modules | grep -e "caddy.logging.encoders.elastic" -e "dns.providers.lego_deprecated" -e "http.handlers.bandwidth" | wc -l | awk '{if ($1 == 3) print "true"; else print "false";}' | grep -q "true" && caddy version | awk '{print $1}' | cut -c 2- | awk '{if ($1 > "2.6.3") print "true"; else print "false";}' || echo false
  register: shell_output

- name: Set boolean variable based on the command output
  set_fact:
    caddy_installed: "{{ shell_output.stdout | trim | lower == 'true' }}"

- name: Caddy compilation required
  block:
    - name: Remove existing Go installation
      file:
        path: /usr/local/go
        state: absent

    - name: Create necessary directories
      file:
        path: "{{ item }}"
        state: directory
        recurse: yes
        owner: root
        group: root
        mode: 0775
      loop:
        - /root/caddy/go
        - /root/.local/share/caddy
        - /usr/local/go
        - /etc/caddy

    - name: Download Go installer
      get_url:
        url: https://golang.org/dl/go{{ go_version }}.linux-amd64.tar.gz
        dest: /root/caddy

    - name: Extract Go installer to /usr/local
      unarchive:
        src: /root/caddy/go{{ go_version }}.linux-amd64.tar.gz
        dest: /usr/local/
        remote_src: true

    - name: Install XCaddy
      shell: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
      environment:
        PATH: '/usr/local/go/bin:$PATH'
        GOROOT: '/usr/local/go'
        GOPATH: '/root/caddy/go'

    - name: Build Caddy
      shell: /root/caddy/go/bin/xcaddy build --with github.com/mediafoundation/caddy-bandwidth@latest --with github.com/caddy-dns/lego-deprecated --with github.com/firecow/caddy-elastic-encoder
      environment:
        PATH: '/usr/local/go/bin:$PATH'
        GOROOT: '/usr/local/go'
        GOPATH: '/root/caddy/go'


    - name: Create caddy group
      group:
        name: caddy
        system: yes

    - name: Create caddy user
      user:
        name: caddy
        system: yes
        home: /var/lib/caddy
        shell: /usr/sbin/nologin
        comment: Caddy web server

    - name: Change owner of /etc/caddy to caddy user
      file:
        path: /etc/caddy
        owner: caddy
        group: caddy
        state: directory

    - name: Copy caddy executable to /usr/local/bin
      copy:
        src: /root/caddy/caddy
        dest: /usr/local/bin/caddy
        owner: root
        group: root
        mode: '0755'
        remote_src: true
  when: not caddy_installed


#Copy files for Client or Server
- name: Copy CaddyFile to /etc/caddy/Caddyfile
  template:
    src: files/edge/caddy/Caddyfile.j2
    dest: /etc/caddy/Caddyfile
  when: inventory_hostname in groups["edge"]

- name: Copy CaddyFile to /etc/caddy/Caddyfile
  template:
    src: files/origin/caddy/Caddyfile.j2
    dest: /etc/caddy/Caddyfile
  when: inventory_hostname in groups["origin"]

- name: Copy caddy service file to /etc/systemd/system/caddy.service
  template:
    src: files/edge/caddy/caddy.service.j2
    dest: /etc/systemd/system/caddy.service
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname in groups["edge"]

- name: Copy caddy service file to /etc/systemd/system/caddy.service
  template:
    src: files/origin/caddy/caddy.service.j2
    dest: /etc/systemd/system/caddy.service
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname in groups["origin"]

#Init caddy

- name: Enable and start caddy service
  systemd:
    name: caddy
    enabled: true
    state: restarted
    daemon_reload: yes

- name: Create cron job to restart caddy on reboot
  cron:
    name: "caddy restart"
    special_time: reboot
    job: "sleep 600 && systemctl restart caddy"