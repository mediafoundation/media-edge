# - name: Confirm install method
#   block:
#     - pause:
#         prompt: "Is this a first run install? Or you already have origins and edges and you are adding more servers to your cluster?\nFirst run: [0]\nAdding more servers: [1]\nDefault: [0]"
#         echo: yes
#       register: add_or_update_input
#     - set_fact:
#         first_run: "{{ add_or_update_input.user_input is not defined or add_or_update_input.user_input != '1' }}"

# - name: First run check
#   debug:
#     msg: "{{first_run}}"

# Start by checking if the 'origin' group exists and is not empty
- name: Check if origins group exists and is not empty
  set_fact:
    origin_ips_exist: "{{ (groups['origin'] | length > 0) | bool }}"
  run_once: true

# If the 'origin' group exists, extract the IP addresses
- name: Store origins IP addresses in a variable
  set_fact:
    origin_ips: "{{ groups['origin'] | map('extract', hostvars, 'ansible_host') | list }}"
  when: origin_ips_exist
  run_once: true

# If the 'origin' group doesn't exist or is empty, prompt for the IP addresses
- name: Prompt for origins IP addresses if not defined
  block:
    - pause:
        prompt: "Enter comma-separated list of origins IP addresses (e.g., 192.168.1.1,192.168.1.2):"
        echo: yes
      register: origin_ips_input
    - set_fact:
        origin_ips: "{{ origin_ips_input.user_input.split(',') | map('trim') | list }}"
  when: not origin_ips_exist or (origin_ips is defined and origin_ips | length == 0)
  run_once: true

- name: Set origin facts
  block:
    - name: Store postgresql password if not defined
      block:
        - pause:
            prompt: "\nEnter your postgresql password"
            echo: no
          register: postgres_password_input
        - set_fact:
            postgres_password: "{{ postgres_password_input.user_input }}"
      when:
        - (db_password is not defined or db_password == "" or db_password == none)
        - inventory_hostname in groups["origin"]
  when: inventory_hostname in groups["origin"]

- name: Set disk capacities as a fact
  set_fact:
    disk_capacities: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | first }}"

- name: Set disk space as variable
  set_fact:
    disk_space: "{{((disk_capacities.size_available / (1024*1024))*0.6) | int}}"

- name: Set CPU cores as a fact
  set_fact:
    cpu_cores: "{{ ansible_processor_vcpus }}"

- name: Set RAM capacity as a fact
  set_fact:
    system_ram: "{{ ansible_memtotal_mb }}"