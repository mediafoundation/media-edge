# - name: Confirm install method
#   block:
#     - pause:
#         prompt: "Is this a first run install? Or you already have origins and edges and you are adding more servers to your cluster?\nFirst run: [0]\nAdding more servers: [1]\nDefault: [0]"
#         echo: yes
#       register: add_or_update_input
#     - set_fact:
#         first_run: "{{ add_or_update_input.user_input is not defined or add_or_update_input.user_input != '1' }}"

# - name: First run check
#   debug:
#     msg: "{{first_run}}"

- name: Check if origins group exists and is not empty
  set_fact:
    origin_ips_exist: "{{ (groups['origin'] | length > 0) | bool }}"

- name: Store origins IP addresses in a variable
  set_fact:
    origin_ips: "{{ groups['origin'] | map('extract', hostvars, 'ansible_host') | list }}"
  when: origin_ips_exist

- name: Prompt for origins IP addresses if not defined
  block:
    - pause:
        prompt: "Enter comma-separated list of origins IP addresses (e.g., 192.168.1.1,192.168.1.2):"
        echo: yes
      register: origin_ips_input
    - set_fact:
        origin_ips: "{{ origin_ips_input.user_input.split(',') | map('trim') | list }}"
  when: not origin_ips_exist | default(false)

- name: Set origin facts
  block:
    - name: Store postgresql password if not defined
      block:
        - pause:
            prompt: "\nEnter your postgresql password"
            echo: no
          register: postgres_password_input
        - set_fact:
            postgres_password: "{{ postgres_password_input.user_input }}"
      when: postgres_password is not defined or postgres_password == "" or postgres_password == none

    - name: Store wallet address if not defined
      block:
        - pause:
            prompt: "\nEnter your provider wallet address. (The one with the staking)"
            echo: yes
          register: wallet_address_input
        - set_fact:
            wallet_address: "{{ wallet_address_input.user_input }}"
      when: wallet_address is not defined or wallet_address == "" or wallet_address == none

    - name: Store private key if not defined
      block:
        - pause:
            prompt: "\nEnter your wallet private key for resource(s) decrypt. This should match the public encryption key provided on the app. (It may or may not be the same as the staking one for security reasons)."
            echo: no
          register: private_key_input
        - set_fact:
            private_key: "{{ private_key_input.user_input }}"
      when: private_key is not defined or private_key == "" or private_key == none

    - name: Store testing if not defined
      block:
        - pause:
            prompt: "\n Enter whether or not is a testing server (true | false)"
            echo: yes
          register: testing_input
        - set_fact:
            testing: "{{testing_input.user_input}}"
      when: testing is not defined or testing == "" or testing == none

    - name: Store persist_ganache_db if not defined
      block:
        - pause:
            prompt: "\n Enter whether or not to persist ganache db (true | false) "
            echo: yes
          register: persist_ganache_db_input
        - set_fact:
            persist_ganache_db: "{{persist_ganache_db_input.user_input}}"
      when: (persist_ganache_db is not defined or persist_ganache_db == "" or persist_ganache_db == none) and testing == true

    - name: Store ganache_host if not defined
      block:
        - pause:
            prompt: "\n Enter ganache host (e.g., 0.0.0.0) "
            echo: yes
          register: ganache_host_input
        - set_fact:
            ganache_host: "{{ganache_host_input.user_input}}"
      when: (ganache_host is not defined or ganache_host == "" or ganache_host == none) and testing == true

    - name: Store persist_ganache_db if not defined
      block:
        - pause:
            prompt: "\n Enter whether or not to persist ganache db (true | false) "
            echo: yes
          register: persist_ganache_db_input
        - set_fact:
            persist_ganache_db: "{{persist_ganache_db_input.user_input}}"
      when: (persist_ganache_db is not defined or persist_ganache_db == "" or persist_ganache_db == none) and testing == true

    - name: Store ganache_port if not defined
      block:
        - pause:
            prompt: "\n Enter ganache host (e.g., 8545) "
            echo: yes
          register: ganache_port_input
        - set_fact:
            ganache_port: "{{ganache_port_input.user_input}}"
      when: (ganache_port is not defined or ganache_port == "" or ganache_port == none) and testing == true

    - name: Store ganache_mnemonic if not defined
      block:
        - pause:
            prompt: "\n Enter ganache mnemonic (e.g., 'blue example stuff') "
            echo: yes
          register: ganache_mnemonic_input
        - set_fact:
            ganache_mnemonic: "{{ganache_mnemonic_input.user_input}}"
      when: (ganache_mnemonic is not defined or ganache_mnemonic == "" or ganache_mnemonic == none) and testing == true

    - name: Store ganache_network_id if not defined
      block:
        - pause:
            prompt: "\n Enter ganache network id (e.g., 1) "
            echo: yes
          register: ganache_network_id_input
        - set_fact:
            ganache_network_id: "{{ganache_network_id_input.user_input}}"
      when: (ganache_network_id is not defined or ganache_network_id == "" or ganache_network_id == none) and testing == true

    - name: Store ganache_chain_id if not defined
      block:
        - pause:
            prompt: "\n Enter ganache chain id (e.g., 1) "
            echo: yes
          register: ganache_chain_id_input
        - set_fact:
            ganache_chain_id: "{{ganache_chain_id_input.user_input}}"
      when: (ganache_chain_id is not defined or ganache_chain_id == "" or ganache_chain_id == none) and testing == true
  when: inventory_hostname in groups["origin"]

- name: Set disk capacities as a fact
  set_fact:
    disk_capacities: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | first }}"

- name: Set disk space as variable
  set_fact:
    disk_space: "{{((disk_capacities.size_available / (1024*1024))*0.6) | int}}"

- name: Set CPU cores as a fact
  set_fact:
    cpu_cores: "{{ ansible_processor_vcpus }}"

- name: Set RAM capacity as a fact
  set_fact:
    system_ram: "{{ ansible_memtotal_mb }}"

# - name: 
#   debug:
#     msg: "{{postgres_password}}"

# - name:
#   pause:
#     prompt: "Do you want to use the origins in testing mode? (yes/no) [no]: "
#     echo: yes
#   register: testing_mode
#   when: inventory_hostname in groups["origin"]

# - name:
#   pause:
#     prompt: "\nEnter your wallet network"
#     echo: no
#   register: wallet_network
#   when: inventory_hostname in groups["edge"]