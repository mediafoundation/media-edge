{
    auto_https disable_redirects
    on_demand_tls {
        ask http://{{ media_origins[0] }}:8080/domains
        interval 2m
        burst 5
    }
}


{% if domain is defined %}
*.{{domain}} {
    header Server "MediaEdge v{{ media_edge_version }} | https://media.network"
    @has_bandwidth_limit header_regexp X-Bandwidth-Limit .+
    handle @has_bandwidth_limit {
        bandwidth {
            limit 100000
        }
    }
    reverse_proxy http://localhost:8080
    log {
        output file /var/log/caddy/caddy.log {
            roll_size 1gb
            roll_keep 5
            roll_keep_for 720h
        }
        format filter {
            wrap json
            fields {
                deal_id {http.request.header.X-Deal-ID}
                common_log
            }
        }
    }
    tls {
        dns lego_deprecated cloudns
        resolvers 1.1.1.1
    }
}
{% endif %}


https:// {
    header Server "MediaEdge v{{ media_edge_version }} | https://media.network"
    @has_bandwidth_limit header_regexp X-Bandwidth-Limit .+
    handle @has_bandwidth_limit {
        bandwidth {
            limit 100000
        }
    }
    reverse_proxy http://localhost:8080
    log {
        output file /var/log/caddy/caddy.log {
            roll_size 1gb
            roll_keep 5
            roll_keep_for 720h
        }
        format filter {
            wrap json
            fields {
                deal_id {http.request.header.X-Deal-ID}
                common_log
            }
        }
    }
    tls {
        on_demand
    }
}

http:// {
    header Server "MediaEdge v{{ media_edge_version }} | https://media.network"
    @has_bandwidth_limit header_regexp X-Bandwidth-Limit .+
    handle @has_bandwidth_limit {
        bandwidth {
            limit 100000
        }
    }
    reverse_proxy http://localhost:8080
    log {
        output file /var/log/caddy/caddy.log {
            roll_size 1gb
            roll_keep 5
            roll_keep_for 720h
        }
        format filter {
            wrap json
            fields {
                deal_id {http.request.header.X-Deal-ID}
                common_log
            }
        }
    }
}