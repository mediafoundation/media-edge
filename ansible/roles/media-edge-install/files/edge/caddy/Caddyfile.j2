{
    order bandwidth before header
    auto_https off
    log {
        format elastic
        output file /var/log/caddy/admin_access.log
    }
}

http://localhost:8343 {
  handle /certs {
    @withServerName {
        query server_name=*
    }
    handle @withServerName {
        rewrite /{query.server_name}/{query.server_name}.pem
        file_server {
            root /data/caddy/certificates/acme-v02.api.letsencrypt.org-directory
        }
    }
    handle {
        respond "Invalid domain" 400
    }
  }
  handle /domain {
    @withServerName {
        query name=*
    }
    handle @withServerName {
        rewrite /{query.name}/{query.name}.pem
        file_server {
            root /data/caddy/certificates/acme-v02.api.letsencrypt.org-directory
        }
    }
    handle {
        respond "Invalid domain" 400
    }
  }
}
{% for provider in providers %}
{% for domain in provider.domains %}
*.{{domain.host}} {
    header Server "MediaEdge v0.2 | https://media.network"
    reverse_proxy http://varnish-edge:8080 {
        @hasBandwidthLimit header X-Bandwidth-Limit Yes
        handle_response @hasBandwidthLimit {
            bandwidth {
                limit 50000
            }
            reverse_proxy http://varnish-edge:8080
        }
    }
    tls {
        get_certificate http http://localhost:8343/domain?name=wildcard_{{domain.host}}
    }
    log {
        format elastic
        output file /var/log/caddy/access.log
    }
}
{% endfor %}
{% endfor %}

https:// {
    header Server "MediaEdge v{{ media_edge_version }} | https://media.network"
    reverse_proxy http://varnish-edge:8080 {
        @hasBandwidthLimit header X-Bandwidth-Limit Yes
        handle_response @hasBandwidthLimit {
            bandwidth {
                limit 50000
            }
            reverse_proxy http://varnish-edge:8080
        }
    }
    tls {
        get_certificate http http://localhost:8343/certs
    }
    log {
        format elastic
        output file /var/log/caddy/access.log
    }
}

http:// {
    header Server "MediaEdge v{{ media_edge_version }} | https://media.network"
    handle /.well-known/acme-challenge/* {
        reverse_proxy http://{{ origin_ips[0] }}:7878
    }
    reverse_proxy http://varnish-edge:8080 {
        @hasBandwidthLimit header X-Bandwidth-Limit Yes
        handle_response @hasBandwidthLimit {
            bandwidth {
               limit 50000
            }
            reverse_proxy http://varnish-edge:8080
        }
    }
    log {
        format elastic
        output file /var/log/caddy/access.log
    }
}